// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Group {
  id           String        @id
  name         String
  information  String?       @db.Text
  currency     String        @default("$")
  participants Participant[]
  expenses     Expense[]
  activities   Activity[]
  encryptedStats EncryptedStats[]
  userSettings UserSettings[]
  createdAt    DateTime      @default(now())
  
  // E2EE fields
  isEncrypted      Boolean     @default(false)
  encryptionSalt   String?     // Salt for PBKDF2 key derivation
  testEncryptedData String?    @db.Text // Encrypted test data for password verification
  testIv           String?     // IV for test data encryption
  
  // Comprehensive encryption fields
  encryptedName        String?  @db.Text // Encrypted group name
  nameIv              String?  // IV for name encryption
  encryptedInformation String?  @db.Text // Encrypted group information
  informationIv       String?  // IV for information encryption
  encryptionVersion   Int?     @default(1) // Version of encryption scheme
  encryptionFields    String[] // List of encrypted field names
}

model Participant {
  id              String           @id
  name            String
  group           Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId         String
  expensesPaidBy  Expense[]
  expensesPaidFor ExpensePaidFor[]
  
  // Comprehensive encryption fields
  encryptedName   String?          @db.Text // Encrypted participant name
  nameIv         String?          // IV for name encryption
  encryptionVersion Int?           @default(1) // Version of encryption scheme
}

model Category {
  id       Int       @id @default(autoincrement())
  grouping String
  name     String
  Expense  Expense[]
}

model Expense {
  id              String            @id
  group           Group             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  expenseDate     DateTime          @default(dbgenerated("CURRENT_DATE")) @db.Date
  title           String
  category        Category?         @relation(fields: [categoryId], references: [id])
  categoryId      Int               @default(0)
  amount          Int
  paidBy          Participant       @relation(fields: [paidById], references: [id], onDelete: Cascade)
  paidById        String
  paidFor         ExpensePaidFor[]
  groupId         String
  isReimbursement Boolean           @default(false)
  splitMode       SplitMode         @default(EVENLY)
  createdAt       DateTime          @default(now())
  documents       ExpenseDocument[]
  notes           String?

  recurrenceRule  RecurrenceRule?    @default(NONE)
  recurringExpenseLink RecurringExpenseLink?
  recurringExpenseLinkId String?
  
  // E2EE fields
  encryptedData   String?           @db.Text // Encrypted JSON of {title, notes}
  encryptionIv    String?           // AES-GCM initialization vector
  
  // Comprehensive encryption fields
  encryptedCategory String?         @db.Text // Encrypted category name
  categoryIv       String?          // IV for category encryption
  encryptedShares  String?          @db.Text // Encrypted share distribution data
  sharesIv        String?          // IV for shares encryption
  
  // CRITICAL SECURITY: Payment relationship encryption
  encryptedPaidBy    String?        @db.Text // Encrypted paidBy participant ID
  paidByIv          String?         // IV for paidBy encryption
  encryptedPaidFor   String?        @db.Text // Encrypted paidFor array (participantId + shares)
  paidForIv         String?         // IV for paidFor encryption
  
  // Financial data encryption
  encryptedAmount    String?        @db.Text // Encrypted amount
  amountIv          String?         // IV for amount encryption
  encryptedExpenseDate String?      @db.Text // Encrypted expense date
  expenseDateIv     String?         // IV for expense date encryption
  
  encryptionVersion Int?            @default(1) // Version of encryption scheme
  encryptionFields String[]         // List of encrypted field names
}

model ExpenseDocument {
  id        String   @id
  url       String
  width     Int
  height    Int
  Expense   Expense? @relation(fields: [expenseId], references: [id])
  expenseId String?
}

enum SplitMode {
  EVENLY
  BY_SHARES
  BY_PERCENTAGE
  BY_AMOUNT
}

model RecurringExpenseLink {
  id String @id
  groupId   String
  currentFrameExpense Expense @relation(fields: [currentFrameExpenseId], references: [id], onDelete: Cascade)
  currentFrameExpenseId String @unique

  // Note: We do not want to link to the next expense because once it is created, it should be 
  // treated as it's own independent entity. This means that if a user wants to delete an Expense
  // and any prior related recurring expenses, they'll need to delete them one by one.
  nextExpenseCreatedAt DateTime?
  nextExpenseDate DateTime

  @@index([groupId])
  @@index([groupId, nextExpenseCreatedAt, nextExpenseDate(sort: Desc)])
}

enum RecurrenceRule {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

model ExpensePaidFor {
  expense       Expense     @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  expenseId     String
  participantId String
  shares        Int         @default(1)

  @@id([expenseId, participantId])
}

model Activity {
  id            String       @id
  group         Group        @relation(fields: [groupId], references: [id])
  groupId       String
  time          DateTime     @default(now())
  activityType  ActivityType
  participantId String?
  expenseId     String?
  data          String?
  
  // Comprehensive encryption fields
  encryptedData      String?  @db.Text // Encrypted activity data
  dataIv            String?  // IV for data encryption
  
  // CRITICAL SECURITY: Reference encryption
  encryptedParticipantId String? @db.Text // Encrypted participant ID reference
  participantIdIv       String? // IV for participant ID encryption
  encryptedExpenseId    String? @db.Text // Encrypted expense ID reference
  expenseIdIv          String? // IV for expense ID encryption
  
  encryptionVersion Int?    @default(1) // Version of encryption scheme
}

enum ActivityType {
  UPDATE_GROUP
  CREATE_EXPENSE
  UPDATE_EXPENSE
  DELETE_EXPENSE
}

model EncryptedStats {
  id               String   @id
  groupId          String
  group            Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  statsType        String   // Type of statistics (totals, balances, etc.)
  
  // Encrypted statistics data
  encryptedData    String   @db.Text // Encrypted statistics JSON
  dataIv           String   // IV for data encryption
  encryptionVersion Int     @default(1)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([groupId, statsType])
}

model UserSettings {
  id               String   @id
  groupId          String
  group            Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participantId    String?  // Optional participant-specific settings
  settingsType     String   // Type of settings (preferences, display, etc.)
  
  // Encrypted settings data
  encryptedData    String   @db.Text // Encrypted settings JSON
  dataIv           String   // IV for data encryption
  encryptionVersion Int     @default(1)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([groupId, settingsType])
  @@unique([groupId, participantId, settingsType])
  @@index([groupId, participantId, settingsType])
}
